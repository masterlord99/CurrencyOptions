St.Dni.Vnaprej <- param$DF[1,9] %>% as.numeric()
Student <- param$DF[1,11]=="Student"
#print(head(data))
sim$sim <- BootStrap(
data=data,
beta=beta,
Percent = Percent,
STRES = STRES,
St.Simulacij = St.Simulacij,
St.Dni.Vnaprej = St.Dni.Vnaprej,
Student = Student,
norm = T
)$Results
#print(class(sim$sim))
#print(dim(sim$sim))
colnames(sim$sim) <- colnames(hist$hist)[kje+1]
Face <- param$DF[,3] %>% as.numeric()
Type <- param$DF[,2]
Premium <- param$DF[,5] %>% as.numeric()
Strike <- param$DF[,4] %>% as.numeric()
tmp <- Eval(simulation = sim$sim,
Face = Face,
Strike = Strike,
Premium = Premium,
Type =  Type   )
#print(dim(sim$sim))
MojResult$final <- tmp$O
Fair$Value <- tmp$Fu
removeModal()
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h2("Done!"),
br(),
h4("You can view the results now."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")),
br())),
easyClose = T,
size = "m",
footer=column(12,align="center",
modalButton("Close",icon=icon("fas fa-check-circle")))
)
})
shinyjs::show("SIM11")
shinyjs::show("SIM211")
enable("report")
err <- F
trigger$i <- F
},silent = F)
if(err){
trigger$i <- F
shinyjs::hide("FINALCOL")
shinyjs::hide("SIM11")
shinyjs::hide("SIM211")
shinyjs::show("pre")
disable("check")
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("Error!"),
br(),
h4("You probably ran out of memory. Please reduce the number of simulations or days ahead."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")),
br())),
easyClose = T,
size = "m",
footer=column(12,align="center",
modalButton("Close",icon=icon("fas fa-check-circle")))
)
})
}
}
})
sim <- reactiveValues(sim=history)
Fair <- reactiveValues(Value=c(1,2,3))
# Calculation -------------------------------------------------------------
MojResult <- reactiveValues(final=c(1,2,3))
output$final <- DT::renderDataTable({
## value today
xx <- c("Invested Money:",
"Paid premium:",
"Total Cost (for options):",
"Expected portfolio value for options (E[X]):",
"Predicted portfolio payoff for options:",
"Relative change in % (options only):",
"Expected portfolio value for futures (E[X]):",
"Predicted portfolio value for futures (Premium is set to 0 for futures):")
yy <- c(sum(as.numeric(param$DF[,3])),
sum(as.numeric(param$DF[,5])),
sum(as.numeric(param$DF[,3])) + sum(as.numeric(param$DF[,5])),
mean(MojResult$final),
as.numeric(quantile(MojResult$final,probs=input$kvant2)),
0,
mean(Fair$Value),
as.numeric(quantile(Fair$Value,probs=input$kvant2))
)
ahm <- data.frame(X=xx,
Y=yy,
stringsAsFactors = F,
row.names = NULL)
colnames(ahm) <- c("Variables:","Values:")
ahm[6,2] <- (ahm[5,2] / ahm[3,2])*100
ahm
},
options = list(
rownames=FALSE)
)
observeEvent(input$kvant2,{
param$DF[,10] <- input$kvant2
})
output$finalValue <- renderPlot({
ha <- density(MojResult$final)
l1 <- as.numeric(min(input$kvant2*length(ha$y),1))
vup <- as.numeric(quantile(MojResult$final,probs=input$kvant2))
g <- ggplot(data.frame(x=ha$x,y=ha$y), aes(x,y, fill="col")) +
geom_line(aes(x=x,y=y),lwd=1.2,col="black") +
xlab("Density of simulated portfolio returns (options):")
d <- ggplot_build(g)$data[[1]]
g <- g + geom_area(data = subset(d, x < vup), aes(x=x, y=y), fill="blue",alpha=0.35)
g <- g + geom_point(data = subset(d, x < vup),
aes(x=tail(x,1),y=tail(y,1)),
color="darkred",lwd=2)
g <- g + geom_segment(data=subset(d, x < vup),
aes(x=tail(x,1),xend=tail(x,1),y=0,yend=tail(y,1)),col="darkred",lwd=1)
g <- g + geom_point(data = subset(d, x < vup),
aes(x=tail(x,1),y=0),
color="darkred",lwd=2) +
theme(legend.position="none")
g
})
output$fut <- renderPlot({
ha <- density(Fair$Value)
l1 <- as.numeric(min(input$kvant2*length(ha$y),1))
vup <- as.numeric(quantile(Fair$Value,probs=input$kvant2))
g <- ggplot(data.frame(x=ha$x,y=ha$y), aes(x,y, fill="col")) +
geom_line(aes(x=x,y=y),lwd=1.2,col="black") +
xlab("Density of simulated portfolio returns (futures):")
d <- ggplot_build(g)$data[[1]]
g <- g + geom_area(data = subset(d, x < vup), aes(x=x, y=y), fill="blue",alpha=0.35)
g <- g + geom_point(data = subset(d, x < vup),
aes(x=tail(x,1),y=tail(y,1)),
color="darkred",lwd=2)
g <- g + geom_segment(data=subset(d, x < vup),
aes(x=tail(x,1),xend=tail(x,1),y=0,yend=tail(y,1)),col="darkred",lwd=1)
g <- g + geom_point(data = subset(d, x < vup),
aes(x=tail(x,1),y=0),
color="darkred",lwd=2)+
theme(legend.position="none")
g
})
# tables and plot ------------------------------------------------------------------
# output$mojUs <- DT::renderDataTable({
#   IPtable$IP
# },
# escape = FALSE,
# options = list(
#   lengthMenu = list(c(10, 100, -1), c("10",'100', 'All')),
#   preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }'),
#   drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')),
# rownames=T
# )
output$SIM <- DT::renderDataTable({
a <-as.matrix(sim$sim[,input$filter])
colnames(a) <- input$filter
a
},
escape = FALSE,
options = list(
lengthMenu = list(c(10, 100, -1), c("10",'100', 'All')),
preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }'),
drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')),
rownames=T
)
output$SIM2 <- DT::renderDataTable({
xx <- data.frame(`Portfolio Values`=MojResult$final)
colnames(xx) <- "Portfolio Values"
xx
},
escape = FALSE,
options = list(
lengthMenu = list(c(10, 100, -1), c("10",'100', 'All')),
preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }'),
drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')),
rownames=T
)
hist <- reactiveValues(hist=history)
output$head <- DT::renderDataTable({
hist$hist[,1:14]
#print(input$currency)
})
output$tail <- DT::renderDataTable({
hist$hist[,c(1,15:27)]
},
escape = FALSE,
options = list(
lengthMenu = list(c(10, 15,20, -1), c("10",'15','20', 'All')),
preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }'),
drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')),
rownames=FALSE
)
output$plot <- renderPlot({
x <- which(input$plot1 == names1) + 1
y <- hist$hist[,1]
x <- hist$hist[,x]
ggplot(data=data.frame(Currency=x,Time=as.Date(y))) +
#geom_line(aes(x=Time,y=sgolayfilt(Currency,p=3,n=101)),lwd=1,col="red")+
geom_smooth(aes(x=Time,y=Currency),lwd=1,col="green")  +
geom_line(aes(x=Time,y=Currency),lwd=1)  +
ggtitle(paste0(input$plot1))
})
output$legend <- DT::renderDataTable({
tec
},
escape = FALSE,
options = list(
lengthMenu = list(c(10, 15,20, -1), c("10",'15','20', 'All')),
preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }'),
drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')),
rownames=FALSE
)
LD <- reactiveValues(LD=tail(history$TIME,1))
output$lastDay <- renderText(
as.character(LD$LD)
)
# refresh -----------------------------------------------------------------
lastTRY <- reactiveValues(i=LastTry)
observeEvent(input$ref,{
up <- T
if(lastTRY$i >= Sys.Date()){
up <- F
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("You are up to date!"),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")))),
br(),
easyClose = T,
footer=column(12,align="center",modalButton("Close")),
fade = T
)
})
}
if(up){
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("Loading data. Please wait."),
br(),
h4("Estimated Time Left: 90 sec."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")))),
br(),
easyClose = F,
footer=NULL
)
})
download.file("https://www.bsi.si/_data/tecajnice/dtecbs-l.xml","tmp.xml")
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("Reading data. Please wait."),
br(),
h4("Estimated Time Left: 90 sec."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")))),
br(),
easyClose = F,
footer=NULL,fade = F
)
})
data <- xmlParse("tmp.xml")
xml_data <- xmlToList(data)
withProgress(message = 'Processing:', value = 0, {
x <- unlist(xml_data[[1]])
df <- as.data.frame(x)
df <- as.data.frame(t(df),stringsAsFactors = F)
df <- df[,1:102]
df <- df[,c(T,T,F)]
ime <- df[,c(F,T)]
valuta <- df[,c(T,F)]
im <- c()
for(i in 1:ncol(ime)){
im <- c(im,as.character(ime[1,i]))
}
colnames(valuta) <- im
df <- valuta
rm(ime,valuta,im)
df <- cbind(TIME=as.Date(tail(x,1)),df)
df <- df[,1:29]
df <- df[, colnames(df)!="ISK"]
df <- df[, colnames(df)!="BGN"]
w <- length(xml_data)
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("Processing data. Please wait."),
br(),
h4("Estimated Time Left: 45 sec."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")))),
br(),
easyClose = F,
footer=NULL,fade = F
)
})
for(i in 2:(length(xml_data)-1)){
df[i,] <- NA
x <- unlist(xml_data[[i]])
df$TIME[i] <- tail(x,1) %>% as.Date()
for(j in 2:ncol(df)){
if(colnames(df)[j] %in% x){
ind <- which(x==colnames(df)[j]) %>% as.numeric()
df[i,j] <- x[ind - 1] %>% as.numeric()
}
}
incProgress(1/w, message =  "Processing:")
#print(i/w)
}
#history <- df
kat <-  !(df$TIME %in% history$TIME)
history <- rbind(history,df[kat,])
#write.csv(history,"data/hist.csv",row.names = F)
history[,2:ncol(history)] <- apply(history[,2:ncol(history)],2,as.numeric)
lastTRY$i <- Sys.Date()
write.csv(history,"data/hist.csv",row.names = F)
write.csv(lastTRY$i,"data/LT.csv",row.names = F)
#assign("history",history,globalenv())
#assign("LastTry",LastTry,globalenv())
#naniar::gg_miss_var(history[,2:ncol(history)],show_pct = T)
#rm(list=setdiff(ls(),c("history")))
#save.image("data.RDATA")
hist$hist <- history
removeModal()
LD$LD <- tail(history$TIME,1)
showModal({
modalDialog(
title=h2(icona_ok),
fluidRow(column(12,align="center",
br(),
h2("Done!"),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")))),
br(),
easyClose = T,
footer=column(12,align="center",modalButton("Close")),
fade = F
)
})
})
}
})
# download ----------------------------------------------------------------
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = function() {
"report.html"
},
content = function(file) {
showModal(
modalDialog(
title= h1(icona_narobe),
br(),
column(12,align="center",h3("Knitting report, please wait.")),
withSpinner("",type=7,color="black"),
easyClose=FALSE,
footer=NULL
)
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path("report.Rmd")
#file.copy("report1.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(par=param$DF,Options=MojResult$final,Futures=Fair$Value,history=hist$hist)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport,output_format = "html_document",
output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
removeModal()
}
)
kdo <- reactiveValues(sem="none")
output$kdoseeem <- renderText({
kdo$sem
})
observeEvent(input$logout,{
#print(kdo$sem)
IP <- read.csv("data/ip.csv",stringsAsFactors = F,encoding="UTF-8")
ind <- which(IP$USERNAME == kdo$sem)
IP$IP[ind] <- "unknown"
IPtable$IP <- IP
write.csv(IP,"data/ip.csv",row.names = F,fileEncoding = "UTF-8")
shinyjs::js$refresh()
})
# edit users --------------------------------------------------------------
tttt <- ""
disable("save")
hide("hot1")
VALUES <- reactiveValues()
#DF1 <- reactiveValues(DF1=read.csv("data/ip.csv",stringsAsFactors = F))
## Handsontable
obsss <- observe({
VALUES[["previous"]] <- isolate(IPtable$IP)
#print(DF1$DF1)
try({
IPtable$IP = hot_to_r(input$hot)
},silent=T)
},suspended = T)
edit <- reactiveValues(edit=T)
output$hot <- renderRHandsontable({
#colnames(DF1$DF1) <-"EDIT"
TMP <- isolate(IPtable$IP)
# if(!is.null(input$hotSelect)){
#TMP <- TMP[TMP$USERNAME == input$hotSelect || TMP$TYPE==input$hotSelect || TMP$LAST_LOGIN==input$hotSelect,]
# }
if (!is.null(TMP)){
rhandsontable(TMP, readOnly = edit$edit,rowHeaders = F,selectCallback = T,stretchH = "all")
}
})
## Save
observeEvent(input$save, {
edit$edit <- T
text$text <- tttt
disable("save")
enable("edit")
toggle("hot2",anim = F)
toggle("hot1",anim=F)
obsss$suspend()
finalDF <- isolate(IPtable$IP)
write.csv(finalDF,"data/ip.csv",row.names = F)
showModal({
modalDialog(
title=h2(icona_ok),
fluidRow(column(12,align="center",
br(),
h4("The changes were saved!"),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")),
br())),
easyClose = T,
size = "m",
footer=column(12,align="center",
modalButton("Close",icon=icon("fas fa-check-circle")))
)
})
#DF1$DF1 <- hot_to_r(finalDF)
})
observeEvent(input$edit,{
edit$edit <- F
text$text <- "You have enabled editing. You can add new users with right click. Use CTRL + F to filter."
enable("save")
disable("edit")
toggle("hot1",anim = F)
toggle("hot2",anim=F)
obsss$resume()
showModal({
modalDialog(
title=h2(icona_narobe),
fluidRow(column(12,align="center",
br(),
h4("You have enable editing."),
br(),
tags$img(src = base64enc::dataURI(file = "www/sample_3.jpg", mime = "image/jpeg")),
br())),
easyClose = T,
size = "m",
footer=column(12,align="center",
modalButton("Close",icon=icon("fas fa-check-circle")))
)
})
})
output$dff <- renderDataTable({
IPtable$IP
}
# ,
# options = list(
#   lengthMenu = list(c(10, -1), c("10", 'ALL')),
#   #preDrawCallback=JS('function() { Shiny.unbindAll(this.api().table().node()); }')
#   drawCallback=JS('function() { Shiny.bindAll(this.api().table().node()); } ')
#)
)
text <- reactiveValues(text=tttt)
output$info <- renderText({
text$text
})
}
shinyApp(ui,server,options = list(port=4000,host="192.168.1.11"))
library(shiny); runApp('MojAppFinal.R')
library(shiny); runApp('MojAppFinal.R')
install.packages("V8")
install.packages("V8")
runApp('MojAppFinal.R')
